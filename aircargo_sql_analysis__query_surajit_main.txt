create database airlines;
-------------------------------------
use airlines;
----------------------------------------------------

CREATE TABLE route_details (
  route_id int unique NOT NULL,
  flight_num int NOT NULL,
  origin_airport varchar(3) NOT NULL,
  destination_airport varchar(100) NOT NULL,
  aircraft_id varchar(100) NOT NULL,
  distance_miles int NOT NULL check(distance_miles >0));
  PRIMARY KEY (route_id),
  CONSTRAINT Flight_number_check CHECK ((substr(flight_num,1,2) = 11)),
);
---------------------------------------------------------------------------------
select * from passengers_on_flights where route_id between 1 and 25;
--------------------------------------------------------------------------------------
select count(customer_id) as number_of_passengers,sum(price_per_ticket) as Total_Revenue
from ticket_details where class_id="Bussiness";
-----------------------------------------------------------------------------------------
select concat(first_name,last_name) as FullName from customer;
--------------------------------------------------------------------------------------
select customer.first_name,customer.last_name from customer left 
join ticket_details on customer.customer_id=ticket_details.customer_id;
-----------------------------------------------------------------------------------
select customer.first_name,customer.last_name from customer
left join ticket_details on customer.customer_id=ticket_details.customer_id
where ticket_details.brand="Emirates";
--------------------------------------------------------------------------------------------
select customer_id,class_id from passengers_on_flights where class_id="Economy Plus";
select customer_id from passengers_on_flights where class_id="Economy Plus";
select customer_id,count(class_id) from passengers_on_flights where class_id="Economy Plus"
group by customer_id having count(class_id)<3;
------------------------------------------------------------------------------------------
select * from ticket_details;
select sum(price_per_ticket) as total_revenue from ticket_details;
select if(15639>10000,"Revenue has crossed 10000","Revenue has not crossed 10000");
------------------------------------------------------------------------------------
create user "shivani";
grant select on customer to shivani;
grant select on passengers_on_flights to shivani;
grant select on route_details to shivani;
grant select on ticket_details to shivani;
------------------------------------------------------------------------------------
select class_id,max(Price_per_ticket) over (Partition  by class_id) 
 as Max_ticketpriceforeach_class from ticket_details;
select distinct(class_id),max(Price_per_ticket) over (Partition  by class_id) 
 as Max_ticketpriceforeach_class from ticket_details;
---------------------------------------------------------------------------------
select customer_id from passengers_on_flights where route_id=4;
select first_name,last_name from customer where customer_id in(2,4,11);
-------------------------------------------------------------------------------------------
select * from passengers_on_flights;
create view myflights
as select * from passengers_on_flights where route_id=4;
select * from myflights;
---------------------------------------------------------------------------------------------
select aircraft_id,customer_id,sum(price_per_ticket) as TotalPrice
from ticket_details group by aircraft_id,customer_id with rollup;
------------------------------------------------------------------------------------------------
select * from ticket_details;
create view airlinesbrand as
select customer_id,class_id,brand,price_per_ticket
from ticket_details where class_id="Bussiness";
select * from airlinesbrand;
------------------------------------------------------------------------------------
Delimiter $$
drop procedure passengerdetails;
create procedure passengerdetails()

begin
select customer.first_name,customer.last_name,passengers_on_flights.route_id
from customer left join passengers_on_flights on
customer.customer_id=passengers_on_flights.customer_id;
end;

call passengerdetails(); /* Details of the passengers with route id */
------------------------------------------------------------------------------------------------

select * from route_details;
Delimiter $$
create procedure myroutes_1()
begin
select * from route_details where distance_miles>2000;
end $$

call myroutes_1();
--------------------------------------------------------------------------------------------------
drop procedure if exists flightanalysis;
delimiter $$
create procedure flightanalysis()
begin
select * from route_details;
select flight_num,distance_miles as shortdistance from routes where distance_miles between 0 and 2000;
select flight_num,distance_miles as intermediatedistance from routes where distance_miles between 2000 and 6500;
select flight_num,distance_miles as LongDistance from routes where distance_miles >6500;

end $$

call flightanalysis();
--------------------------------------------------------------------------------------------------------------

drop procedure if exists ticketanalysis;

Delimiter $$
create procedure ticketanalysis()
begin
select p_date,customer_id,class_id from ticket_details;
select class_id as firstclass from ticket_details where class_id="Bussiness";
alter table ticket_details add column Compserv varchar(100);
update ticket_details set compserv="Yes" where class_id="Bussiness";
select distinct(class_id),compserv from ticket_details where class_id="Bussiness";
update ticket_details set compserv="Yes" where class_id="Economy Plus";
select distinct(class_id),compserv from ticket_details where class_id="Economy Plus";
update ticket_details set compserv="No" where class_id="Economy";
select distinct(class_id),compserv from ticket_details where class_id="Economy";
update ticket_details set compserv="No" where class_id="First Class";
select distinct(class_id),compserv from ticket_details where class_id="First Class";
end $$
-------------------------------------------------------------------------------------------
delimiter $$

create procedure finalnames()
begin

Declare c1 cursor for select last_name from customer where last_name like '%Scott';
open c1;
select * from customer where last_name like '%Scott';
end $$

call finalnames();
-----------------------------------------------------------------------------












